{"filter":false,"title":"ityped.js","tooltip":"/src/ityped.js","undoManager":{"mark":3,"position":3,"stack":[[{"start":{"row":17,"column":0},"end":{"row":46,"column":14},"action":"remove","lines":["  /**","   * async foreach","   * https://www.npmjs.com/package/async-foreach","   */","    const forEach = function (a, b, c) {","      var d = -1,","        e = a.length >>> 0;","      (function f(g) {","        var h,","          j = g === !1;","        do","          ++d;","        while (!(d in a) && d !== e);","        if (j || d === e) {","          c && c(!j, a);","          return","        }","        g = b.call({","          async: function () {","            return h = !0,","            f","          }","        }, a[d], d, a),","        h || f(g)","      })();","    };","","","  /**","   * el is the"],"id":2,"ignore":true},{"start":{"row":17,"column":0},"end":{"row":18,"column":5},"action":"insert","lines":["","  let"]},{"start":{"row":18,"column":13},"end":{"row":18,"column":14},"action":"insert","lines":[","]},{"start":{"row":19,"column":3},"end":{"row":25,"column":10},"action":"remove","lines":["*/","  let selectedElement,","    props,","    /**","    * creating the cursor","    */","    cursor"]},{"start":{"row":19,"column":3},"end":{"row":20,"column":16},"action":"insert","lines":["   props = {},","      cursorSpan"]},{"start":{"row":21,"column":0},"end":{"row":22,"column":0},"action":"insert","lines":["",""]},{"start":{"row":22,"column":8},"end":{"row":23,"column":4},"action":"remove","lines":["","    "]},{"start":{"row":22,"column":8},"end":{"row":22,"column":12},"action":"insert","lines":["Span"]},{"start":{"row":22,"column":22},"end":{"row":23,"column":4},"action":"remove","lines":["","    "]},{"start":{"row":23,"column":8},"end":{"row":23,"column":12},"action":"insert","lines":["Span"]},{"start":{"row":25,"column":2},"end":{"row":33,"column":43},"action":"remove","lines":["/**","   * @name setProps","   * @description Set the ityped properties configuration","   * @param {Object} config The configuration properties","   * @return {Promise}","   */","  function setProps ( config ) {","    let props = config;","    props.strings    = config.strings    ||"]},{"start":{"row":25,"column":2},"end":{"row":31,"column":13},"action":"insert","lines":["let STRINGS,","      i = 0,","      l;","","  function init(","    id,","    strings ="]},{"start":{"row":31,"column":23},"end":{"row":31,"column":24},"action":"insert","lines":["r"]},{"start":{"row":31,"column":37},"end":{"row":31,"column":39},"action":"remove","lines":[".."]},{"start":{"row":31,"column":41},"end":{"row":31,"column":51},"action":"remove","lines":["and Enjoy!"]},{"start":{"row":31,"column":41},"end":{"row":31,"column":50},"action":"insert","lines":["Nice, uh?"]},{"start":{"row":31,"column":52},"end":{"row":31,"column":53},"action":"insert","lines":[","]},{"start":{"row":32,"column":4},"end":{"row":32,"column":30},"action":"remove","lines":["props.typeSpeed  = config."]},{"start":{"row":32,"column":4},"end":{"row":33,"column":6},"action":"insert","lines":["{","      "]},{"start":{"row":33,"column":16},"end":{"row":33,"column":19},"action":"remove","lines":[" ||"]},{"start":{"row":33,"column":16},"end":{"row":33,"column":17},"action":"insert","lines":["="]},{"start":{"row":33,"column":21},"end":{"row":33,"column":22},"action":"remove","lines":[";"]},{"start":{"row":33,"column":21},"end":{"row":33,"column":22},"action":"insert","lines":[","]},{"start":{"row":34,"column":4},"end":{"row":34,"column":30},"action":"remove","lines":["props.backSpeed  = config."]},{"start":{"row":34,"column":4},"end":{"row":34,"column":6},"action":"insert","lines":["  "]},{"start":{"row":34,"column":16},"end":{"row":34,"column":19},"action":"remove","lines":[" ||"]},{"start":{"row":34,"column":16},"end":{"row":34,"column":17},"action":"insert","lines":["="]},{"start":{"row":34,"column":20},"end":{"row":34,"column":21},"action":"remove","lines":[";"]},{"start":{"row":34,"column":20},"end":{"row":34,"column":21},"action":"insert","lines":[","]},{"start":{"row":35,"column":4},"end":{"row":35,"column":34},"action":"remove","lines":["props.backDelay  = config.back"]},{"start":{"row":35,"column":4},"end":{"row":35,"column":11},"action":"insert","lines":["  start"]},{"start":{"row":35,"column":17},"end":{"row":35,"column":20},"action":"remove","lines":[" ||"]},{"start":{"row":35,"column":17},"end":{"row":35,"column":18},"action":"insert","lines":["="]},{"start":{"row":35,"column":22},"end":{"row":35,"column":23},"action":"remove","lines":[";"]},{"start":{"row":35,"column":22},"end":{"row":35,"column":23},"action":"insert","lines":[","]},{"start":{"row":36,"column":4},"end":{"row":36,"column":35},"action":"remove","lines":["props.startDelay = config.start"]},{"start":{"row":36,"column":4},"end":{"row":36,"column":10},"action":"insert","lines":["  back"]},{"start":{"row":36,"column":16},"end":{"row":36,"column":18},"action":"remove","lines":["||"]},{"start":{"row":36,"column":16},"end":{"row":36,"column":17},"action":"insert","lines":["="]},{"start":{"row":36,"column":21},"end":{"row":36,"column":22},"action":"remove","lines":[";"]},{"start":{"row":36,"column":21},"end":{"row":36,"column":22},"action":"insert","lines":[","]},{"start":{"row":37,"column":4},"end":{"row":38,"column":43},"action":"remove","lines":["props.showCursor = config.showCursor;","    props.loop       = config.loop       ||"]},{"start":{"row":37,"column":4},"end":{"row":38,"column":12},"action":"insert","lines":["  cursor = '|',","      loop ="]},{"start":{"row":38,"column":18},"end":{"row":39,"column":0},"action":"remove","lines":[";",""]},{"start":{"row":38,"column":18},"end":{"row":38,"column":19},"action":"insert","lines":[","]},{"start":{"row":39,"column":4},"end":{"row":50,"column":31},"action":"remove","lines":["if (props.showCursor === undefined) props.showCursor = true;","    if (props.showCursor) selectedElement.insertAdjacentElement('afterend', cursor);","    if (props.cursorChar !== undefined) cursor.textContent = props.cursorChar;","","    return Promise.resolve(props);","  }","  /**","   * @name init","   * @param {String} element The element that will receive the strings","   * @param {Object} config The initial configuration","   */","  function init(element, config"]},{"start":{"row":39,"column":4},"end":{"row":41,"column":2},"action":"insert","lines":["  onFinished","    } = {}  // configs are optional","  "]},{"start":{"row":42,"column":0},"end":{"row":43,"column":0},"action":"insert","lines":["",""]},{"start":{"row":43,"column":4},"end":{"row":43,"column":5},"action":"remove","lines":["s"]},{"start":{"row":43,"column":7},"end":{"row":43,"column":14},"action":"remove","lines":["ctedEle"]},{"start":{"row":43,"column":23},"end":{"row":43,"column":44},"action":"remove","lines":["querySelector(element"]},{"start":{"row":43,"column":23},"end":{"row":43,"column":40},"action":"insert","lines":["getElementById(id"]},{"start":{"row":44,"column":0},"end":{"row":45,"column":0},"action":"insert","lines":["",""]},{"start":{"row":45,"column":4},"end":{"row":46,"column":24},"action":"remove","lines":["setProps(config).then(function(properties){","      props = properties"]},{"start":{"row":45,"column":4},"end":{"row":45,"column":31},"action":"insert","lines":["props.typeSpeed = typeSpeed"]},{"start":{"row":46,"column":4},"end":{"row":46,"column":5},"action":"remove","lines":[" "]},{"start":{"row":46,"column":4},"end":{"row":52,"column":42},"action":"remove","lines":[" loopingOnWords(props.strings);","    })","  }","","  /**","   * @name loopingOnWords","   * @description Loop on each string pass"]},{"start":{"row":46,"column":4},"end":{"row":46,"column":29},"action":"insert","lines":["props.backSpeed = backSpe"]},{"start":{"row":46,"column":31},"end":{"row":46,"column":32},"action":"insert","lines":[";"]},{"start":{"row":47,"column":3},"end":{"row":96,"column":0},"action":"remove","lines":["* @param {Array} words The array that contain the words","   */","  function loopingOnWords(words) {","    forEach(words, function (word, index, arr) {","      let time = (props.typeSpeed * word.length - 1);","      /**","       * set the correct time","       * with the differences of type and back","       * speed","       */","      if (props.backSpeed < props.typeSpeed) {","        time -= (props.typeSpeed - props.backSpeed) * word.length;","      } else if (props.backSpeed > props.typeSpeed) {","        time += (props.backSpeed - props.typeSpeed) * word.length;","      }","      let done = this.async();","      let len = words.length;","      iterateWords(selectedElement, word, index, len).then(function () {","        setTimeout(function () {","          done();","        }, time)","      })","    }, function () {","      if (props.loop) {","        loopingOnWords(words);","      }","    });","  }","  /**","   * @name increment","   * @description Increment each letter and append it on element","   * @param {Element} selectedElement The Element that will receive the letters","   * @param {String} word The string that will be looped to","   * get each letter","   * @return {Promise}","   */","  function increment(selectedElement, word) {","    return new Promise(function (resolve, reject) {","      for (let i = 0; i < word.length; i++) {","        count = 0;","        let wordIndex = i;","        let len = word.length;","        setTimeout(function (i) {","          appendWord(selectedElement, word.charAt(wordIndex));","          count++;","          if (count === len - 1) {","            resolve();","          }","        }, props.typeSpeed * i);",""]},{"start":{"row":47,"column":3},"end":{"row":67,"column":18},"action":"insert","lines":[" props.backDelay = backDelay || 0;   // adressess backDelay: false","    props.startDelay = startDelay || 0; // adressess startDelay: false","    props.loop = loop;","","    if (onFinished) props.onFinished = onFinished;","","    STRINGS = strings;","    l = strings.length;","","    if (cursor) {","      cursorSpan.textContent = cursor;","      element.insertAdjacentElement('afterend', cursorSpan);","    }","      ","    typewrite(strings);","  }","","  function typewrite(strings) {","    if (i === l)","      if (props.loop) i = 0;  // should always be the case","      else return;"]},{"start":{"row":67,"column":24},"end":{"row":68,"column":0},"action":"remove","lines":["}",""]},{"start":{"row":67,"column":28},"end":{"row":90,"column":36},"action":"remove","lines":["})","  }","  /**","   * @name appendWord","   * @description Append each letter on Element","   * @param {Element} selectedElement The Element that will receive the letter","   * @param {String} word The string that will be appended","   */","  function appendWord(selectedElement, word) {","    selectedElement.innerHTML += word;","  }","","  /**","   * @name iterateWords","   * @description Iterate on each word, incrementing and decrementing","   * @param {Element} selectedElement The Element that will receive the letters of word","   * @param {String} word The string that is the word","   * @param {Integer} index The index position of the words Array","   * @param {Integer} wordsLengthArray The length of words Array","   * @return {Promise}","   */","  function iterateWords(selectedElement, word, index, wordsLengthArray) {","    return new Promise(function (resolve, reject) {","      increment(selectedElement, wor"]},{"start":{"row":67,"column":28},"end":{"row":80,"column":21},"action":"insert","lines":["  // probably not usefull","","    setTimeout(() => { typeString(strings[i]); }, props.startDelay);","","  }","","  function typeString(str) {","    let index = 0,","        strLen = str.length;","","    let intervalID = setInterval(() => {","      element.textContent += str[index];","      if (++index === strLen) return onStringTyped(intervalID);","    }, props.typeSpee"]},{"start":{"row":80,"column":23},"end":{"row":80,"column":24},"action":"insert","lines":[";"]},{"start":{"row":81,"column":2},"end":{"row":120,"column":29},"action":"remove","lines":["      .then(function () {","          setTimeout(function () {","            decrement(selectedElement, word, index, wordsLengthArray)","              .then(function () {","                setTimeout(function(){","                  resolve();","                }, props.startDelay)","              });","          }, props.backDelay)","        });","    });","  }","  /**","   * @name iterateInsideDecrement","   * @description Iterate on each word, inside the decrement function for decrement the word","   * @param {Element} selectedElement The Element that will receive the letters of word","   * @param {String} word The string that is the word","   * @param {Integer} len The length of words Array","   * @param {Promise} resolve The Promise.resolve method that will be trigerred when","   * the decrement iteration are finished","   * @return {Promise}","   */","  function iterateInsideDecrement(selectedElement, word, len, resolve) {","    for (let i = len; i > 0; i--) {","      let iteratedI = i, count = len;","      setTimeout(function (i) {","        selectedElement.innerHTML = word.substring(0, len - iteratedI)","        count--;","        if (iteratedI === 1) {","          resolve();","        }","      }, props.backSpeed * i);","    }","  }","","  /**","   * @name decrement","   * @description decrement the word in the correct case","   * @param {Element} selectedElement The Element that will receive the letters of word","   * @param {String} word The"]},{"start":{"row":81,"column":2},"end":{"row":92,"column":16},"action":"insert","lines":["}","","  function onStringTyped(id) {","    clearInterval(id);","    if (!props.loop && i === l - 1)   // if no loop, don’t erase last string","      return (props.onFinished) ? props.onFinished() : null;","    setTimeout(eraseString, props.backDelay);","  }","","  function eraseString() {","    let str = element.textContent,","        strLen ="]},{"start":{"row":92,"column":20},"end":{"row":92,"column":21},"action":"remove","lines":["i"]},{"start":{"row":92,"column":20},"end":{"row":92,"column":23},"action":"insert","lines":[".le"]},{"start":{"row":92,"column":25},"end":{"row":92,"column":26},"action":"remove","lines":[" "]},{"start":{"row":92,"column":27},"end":{"row":98,"column":27},"action":"remove","lines":["at is the word","   * @param {Integer} index The index of the Array that contain the word","   * @param {Integer} lengthWords The length of words Array","   */","  function decrement(selectedElement, word, index, lengthWords) {","    return new Promise(function (resolve, reject) {","      let len = word.length"]},{"start":{"row":92,"column":27},"end":{"row":95,"column":50},"action":"insert","lines":[";","","    let intervalID = setInterval(() => {","      element.textContent = str.substr(0,--strLen)"]},{"start":{"row":96,"column":5},"end":{"row":96,"column":8},"action":"remove","lines":[" //"]},{"start":{"row":96,"column":9},"end":{"row":101,"column":28},"action":"remove","lines":["is the last letter and the last word and no loop","      if (index + 1 === lengthWords) {","        if (!props.loop) {","        // when the last word","          if (props.onFinished !== undefined && typeof props.onFinished === \"function\"){","              props.onFinish"]},{"start":{"row":96,"column":9},"end":{"row":97,"column":20},"action":"insert","lines":["(strLen === 0) return onStringErased(intervalID);","    }, props.backSpe"]},{"start":{"row":97,"column":22},"end":{"row":97,"column":23},"action":"remove","lines":["("]},{"start":{"row":98,"column":2},"end":{"row":112,"column":5},"action":"remove","lines":["        }","          selectedElement.innerHTML = word;","        }","        else if (props.loop) {","          iterateInsideDecrement(selectedElement, word, len, resolve);","        }","      } else if (index + 1 !== lengthWords) {","        iterateInsideDecrement(selectedElement, word, len, resolve);","      }","    })","  }","","  /**","   * Return the init function","   */"]},{"start":{"row":98,"column":2},"end":{"row":105,"column":0},"action":"insert","lines":["}","","  function onStringErased(id) {","    clearInterval(id);","    ++i;","    typewrite(STRINGS);","  }",""]},{"start":{"row":106,"column":15},"end":{"row":106,"column":16},"action":"insert","lines":[";"]},{"start":{"row":107,"column":10},"end":{"row":108,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":108,"column":0},"action":"remove","lines":["/**"," * @name ityped"," * @description Dead simple Animated Typing with no dependencies"," * @author Luis Vinícius"," * @email luis@uilabs.me"," */;","(function (root, factory) {","  if (typeof define === \"function\" && define.amd) {","    define([], factory);","  } else if (typeof exports === \"object\") {","    module.exports = {","      init: factory.init","    }","  } else {","    root.ityped = factory;","  }","}(this, function (global) {","","  let element,","      props = {},","      cursorSpan = document.createElement('span');","","  cursorSpan.classList.add('ityped-cursor');","  cursorSpan.textContent = '|';","","  let STRINGS,","      i = 0,","      l;","","  function init(","    id,","    strings = ['Put your string here.', 'Nice, uh?'],","    {","      typeSpeed = 100,","      backSpeed = 50,","      startDelay = 500,","      backDelay = 500,","      cursor = '|',","      loop = false,","      onFinished","    } = {}  // configs are optional","  ) {","","    element = document.getElementById(id);","","    props.typeSpeed = typeSpeed;","    props.backSpeed = backSpeed;","    props.backDelay = backDelay || 0;   // adressess backDelay: false","    props.startDelay = startDelay || 0; // adressess startDelay: false","    props.loop = loop;","","    if (onFinished) props.onFinished = onFinished;","","    STRINGS = strings;","    l = strings.length;","","    if (cursor) {","      cursorSpan.textContent = cursor;","      element.insertAdjacentElement('afterend', cursorSpan);","    }","      ","    typewrite(strings);","  }","","  function typewrite(strings) {","    if (i === l)","      if (props.loop) i = 0;  // should always be the case","      else return;            // probably not usefull","","    setTimeout(() => { typeString(strings[i]); }, props.startDelay);","","  }","","  function typeString(str) {","    let index = 0,","        strLen = str.length;","","    let intervalID = setInterval(() => {","      element.textContent += str[index];","      if (++index === strLen) return onStringTyped(intervalID);","    }, props.typeSpeed);","  }","","  function onStringTyped(id) {","    clearInterval(id);","    if (!props.loop && i === l - 1)   // if no loop, don’t erase last string","      return (props.onFinished) ? props.onFinished() : null;","    setTimeout(eraseString, props.backDelay);","  }","","  function eraseString() {","    let str = element.textContent,","        strLen = str.length;","","    let intervalID = setInterval(() => {","      element.textContent = str.substr(0,--strLen);","      if (strLen === 0) return onStringErased(intervalID);","    }, props.backSpeed);","  }","","  function onStringErased(id) {","    clearInterval(id);","    ++i;","    typewrite(STRINGS);","  }","","  return {init};","}(this)));",""],"id":3},{"start":{"row":0,"column":0},"end":{"row":239,"column":10},"action":"insert","lines":["/**"," * @name ityped"," * @description Dead simple Animated Typing with no dependencies"," * @author Luis Vinícius"," * @email luis@uilabs.me"," */;","(function (root, factory) {","  if (typeof define === \"function\" && define.amd) {","    define([], factory);","  } else if (typeof exports === \"object\") {","    module.exports = {","      init: factory.init","    }","  } else {","    root.ityped = factory;","  }","}(this, function (global) {","  /**","   * async foreach","   * https://www.npmjs.com/package/async-foreach","   */","    const forEach = function (a, b, c) {","      var d = -1,","        e = a.length >>> 0;","      (function f(g) {","        var h,","          j = g === !1;","        do","          ++d;","        while (!(d in a) && d !== e);","        if (j || d === e) {","          c && c(!j, a);","          return","        }","        g = b.call({","          async: function () {","            return h = !0,","            f","          }","        }, a[d], d, a),","        h || f(g)","      })();","    };","","","  /**","   * el is the element","   */","  let selectedElement,","    props,","    /**","    * creating the cursor","    */","    cursor = document.createElement('span');","  cursor","    .classList","    .add('ityped-cursor');","  cursor.textContent = '|';","","  /**","   * @name setProps","   * @description Set the ityped properties configuration","   * @param {Object} config The configuration properties","   * @return {Promise}","   */","  function setProps ( config ) {","    let props = config;","    props.strings    = config.strings    || ['Put you string here...', 'and Enjoy!']","    props.typeSpeed  = config.typeSpeed  || 100;","    props.backSpeed  = config.backSpeed  || 50;","    props.backDelay  = config.backDelay  || 500;","    props.startDelay = config.startDelay || 500;","    props.showCursor = config.showCursor;","    props.loop       = config.loop       || false;","","    if (props.showCursor === undefined) props.showCursor = true;","    if (props.showCursor) selectedElement.insertAdjacentElement('afterend', cursor);","    if (props.cursorChar !== undefined) cursor.textContent = props.cursorChar;","","    return Promise.resolve(props);","  }","  /**","   * @name init","   * @param {String} element The element that will receive the strings","   * @param {Object} config The initial configuration","   */","  function init(element, config) {","    selectedElement = document.querySelector(element);","    setProps(config).then(function(properties){","      props = properties;","      loopingOnWords(props.strings);","    })","  }","","  /**","   * @name loopingOnWords","   * @description Loop on each string passed","   * @param {Array} words The array that contain the words","   */","  function loopingOnWords(words) {","    forEach(words, function (word, index, arr) {","      let time = (props.typeSpeed * word.length - 1);","      /**","       * set the correct time","       * with the differences of type and back","       * speed","       */","      if (props.backSpeed < props.typeSpeed) {","        time -= (props.typeSpeed - props.backSpeed) * word.length;","      } else if (props.backSpeed > props.typeSpeed) {","        time += (props.backSpeed - props.typeSpeed) * word.length;","      }","      let done = this.async();","      let len = words.length;","      iterateWords(selectedElement, word, index, len).then(function () {","        setTimeout(function () {","          done();","        }, time)","      })","    }, function () {","      if (props.loop) {","        loopingOnWords(words);","      }","    });","  }","  /**","   * @name increment","   * @description Increment each letter and append it on element","   * @param {Element} selectedElement The Element that will receive the letters","   * @param {String} word The string that will be looped to","   * get each letter","   * @return {Promise}","   */","  function increment(selectedElement, word) {","    return new Promise(function (resolve, reject) {","      for (let i = 0; i < word.length; i++) {","        count = 0;","        let wordIndex = i;","        let len = word.length;","        setTimeout(function (i) {","          appendWord(selectedElement, word.charAt(wordIndex));","          count++;","          if (count === len - 1) {","            resolve();","          }","        }, props.typeSpeed * i);","      }","    })","  }","  /**","   * @name appendWord","   * @description Append each letter on Element","   * @param {Element} selectedElement The Element that will receive the letter","   * @param {String} word The string that will be appended","   */","  function appendWord(selectedElement, word) {","    selectedElement.innerHTML += word;","  }","","  /**","   * @name iterateWords","   * @description Iterate on each word, incrementing and decrementing","   * @param {Element} selectedElement The Element that will receive the letters of word","   * @param {String} word The string that is the word","   * @param {Integer} index The index position of the words Array","   * @param {Integer} wordsLengthArray The length of words Array","   * @return {Promise}","   */","  function iterateWords(selectedElement, word, index, wordsLengthArray) {","    return new Promise(function (resolve, reject) {","      increment(selectedElement, word)","        .then(function () {","          setTimeout(function () {","            decrement(selectedElement, word, index, wordsLengthArray)","              .then(function () {","                setTimeout(function(){","                  resolve();","                }, props.startDelay)","              });","          }, props.backDelay)","        });","    });","  }","  /**","   * @name iterateInsideDecrement","   * @description Iterate on each word, inside the decrement function for decrement the word","   * @param {Element} selectedElement The Element that will receive the letters of word","   * @param {String} word The string that is the word","   * @param {Integer} len The length of words Array","   * @param {Promise} resolve The Promise.resolve method that will be trigerred when","   * the decrement iteration are finished","   * @return {Promise}","   */","  function iterateInsideDecrement(selectedElement, word, len, resolve) {","    for (let i = len; i > 0; i--) {","      let iteratedI = i, count = len;","      setTimeout(function (i) {","        selectedElement.innerHTML = word.substring(0, len - iteratedI)","        count--;","        if (iteratedI === 1) {","          resolve();","        }","      }, props.backSpeed * i);","    }","  }","","  /**","   * @name decrement","   * @description decrement the word in the correct case","   * @param {Element} selectedElement The Element that will receive the letters of word","   * @param {String} word The string that is the word","   * @param {Integer} index The index of the Array that contain the word","   * @param {Integer} lengthWords The length of words Array","   */","  function decrement(selectedElement, word, index, lengthWords) {","    return new Promise(function (resolve, reject) {","      let len = word.length;","      // if is the last letter and the last word and no loop","      if (index + 1 === lengthWords) {","        if (!props.loop) {","        // when the last word","          if (props.onFinished !== undefined && typeof props.onFinished === \"function\"){","              props.onFinished();","          }","          selectedElement.innerHTML = word;","        }","        else if (props.loop) {","          iterateInsideDecrement(selectedElement, word, len, resolve);","        }","      } else if (index + 1 !== lengthWords) {","        iterateInsideDecrement(selectedElement, word, len, resolve);","      }","    })","  }","","  /**","   * Return the init function","   */","  return {init}","}(this)));"]}],[{"start":{"row":67,"column":53},"end":{"row":67,"column":54},"action":"insert","lines":["r"],"id":4,"ignore":true},{"start":{"row":239,"column":10},"end":{"row":240,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":239,"column":10},"end":{"row":240,"column":0},"action":"remove","lines":["",""],"id":5}]]},"ace":{"folds":[],"scrolltop":1320,"scrollleft":0,"selection":{"start":{"row":239,"column":10},"end":{"row":239,"column":10},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":56,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1484136093056,"hash":"aad4499b5ed921f74882f4be94c47c5b3b3162ec"}